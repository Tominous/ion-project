options:
	p: &6 ●&f
	t: &f
	h: &7
	a: &4&lERROR&c
	em: &cInvalid Permissions
	joinMessage: &e%name of player% joined
	quitMessage: &e%name of player% left
	alert: &4&lALERT&r
aliases:
	blacklisted = tnt, bedrock
#! json.sk
# I DO NOT OWN json.sk, I DON'T TAKE ANY CREDIT
# json.sk BELONGS TO "RezzedUp"
options:
	debug: true
	codes: 0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|k|l|m|n|o|r
function removeColorProton(msg: text) :: text:
	set {_m::*} to {_msg} split at ""

	set {_color-codes} to "{@codes}"
	set {_colors::*} to {_color-codes} split at "|"

	set {_new} to ""

	loop {_m::*}:
		set {_char} to loop-value
		set {_prev} to the last character of {_new}

		if {_prev} is "&":

			loop {_colors::*}:

				if loop-value-2 is {_char}:
					set {_skip} to true

		if {_skip} is set:
			delete {_skip}

		else:
			set {_new} to "%{_new}%%{_char}%"

	return {_new}
function jsonColorizeProton(msg: text, default-color: text = "&r") :: text:
	set {_m::*} to {_msg} split at ""

	set {_color-codes} to "{@codes}"
	set {_colors::*} to {_color-codes} split at "|"

	set {_color} to colored {_default-color}
	set {_code} to the first character of {_color}

	set {_new} to ""
	set {_skip} to 0

	loop amount of {_m::*} times:

		if {_skip} is more than or equal to 1:
			subtract 1 from {_skip}

		else:
			set {_char} to {_m::%loop-number%}
			set {_next} to {_m::%loop-number + 1%}

			if {@debug} is true:
				broadcast "&a[Character Check] &r%loop-number%: &7%{_char}% &r&onext: &8%{_next}% &r[%{_color}%color&r]"

			if {_char} is "&" or {_code}:

				if {@debug} is true:
					broadcast "&a[Colour Check] &rFOUND: &o%{_char}%%{_next}% &7&m<--&7&o is it valid?"

				loop {_colors::*}:

					if loop-value-2 is {_next}:
						set {_color} to "%{_color}%%{_code}%%{_next}%"

						if {_next} is "r":
							set {_color} to {_default-color}

						set {_new} to "%{_new}%%{_color}%"
						set {_skip} to 1

				if {_skip} is less than or equal to 0:
					set {_new} to "%{_new}%%{_char}%"

			else if {_char} is " ":
				set {_new} to "%{_new}% %{_color}%"

			else:
				set {_new} to "%{_new}%%{_char}%"

	return {_new}
function jsonSanitizeProton(msg: text) :: text:
	if {@debug} is true:
		broadcast "&a[Sanitise] &7&oSanitising input..."

	set {_m::*} to {_msg} split at ""

	loop {_m::*}:

		if loop-value is """":
			set {_m::%loop-index%} to "\""" # """

		else if loop-value is "\":
			set {_m::%loop-index%} to "\\"

	set {_new} to join {_m::*} with ""
	return {_new}
function jsonFormatProton(msg: text, color: boolean = true) :: text:
	set {_m::*} to {_msg} split at "||"

	set {_current} to 1

	loop {_m::*}:
		if {_clusters::%{_current}%} is not set:
			set {_clusters::%{_current}%} to ""

		if {_clusters::%{_current}%::text} is not set:
			set {_clusters::%{_current}%::text} to jsonSanitizeProton(loop-value)

		else:
			set {_tag} to the first 4 characters of loop-value
			set {_value} to subtext of loop-value from characters 5 to the length of loop-value

			if {_tag} is "ttp:":
				set {_clusters::%{_current}%::tooltip} to jsonSanitizeProton({_value})

			else if {_tag} is "cmd:":
				set {_clusters::%{_current}%::command} to jsonSanitizeProton({_value})

			else if {_tag} is "sgt:":
				set {_clusters::%{_current}%::suggest} to jsonSanitizeProton({_value})

			else if {_tag} is "url:":

				if {_value} doesn't contain "http://" or "https://":
					set {_value} to "http://%{_value}%"

				set {_clusters::%{_current}%::url} to jsonSanitizeProton({_value})

			else if {_tag} is "ins:":
				set {_clusters::%{_current}%::insertion} to jsonSanitizeProton({_value})

			else:
				add 1 to {_current}
				set {_clusters::%{_current}%::text} to jsonSanitizeProton(loop-value)
				set {_clusters::%{_current}%} to ""

			if {@debug} is true:
				broadcast "&a[Tag Check] &3cluster:&b%{_current}% &8(&f&o%{_tag}%&8)"

	loop {_clusters::*}:

		if {@debug} is true:
			broadcast "&a[Cluster Check] &7&oCluster ##%loop-index% exists."

		set {_i} to loop-index

		set {_text} to {_clusters::%{_i}%::text}

		if {_color} is true:
			set {_text} to jsonColorizeProton({_text})

		if {_json} is not set:
			set {_json} to "{""text"":""%{_text}%"""
		else:
			set {_json} to "%{_json}%,{""text"":""%{_text}%"""

		if {_clusters::%{_i}%::tooltip} is set:

			if {_color} is true:
				set {_tooltip} to jsonColorizeProton({_clusters::%{_i}%::tooltip})

			else:
				set {_tooltip} to {_clusters::%{_i}%::tooltip}

			set {_json} to "%{_json}%,""hoverEvent"":{""action"": ""show_text"",""value"": ""%{_tooltip}%""}"

		if {_clusters::%{_i}%::insertion} is set:
			set {_json} to "%{_json}%,""insertion"":""%{_clusters::%{_i}%::insertion}%"",""obfuscated"":false"

		if {_clusters::%{_i}%::command} is set:
			set {_clickable} to "%{_json}%,""clickEvent"":{""action"":""run_command"",""value"":""%{_clusters::%{_i}%::command}%""}"

		if {_clusters::%{_i}%::suggest} is set:
			set {_clickable} to "%{_json}%,""clickEvent"":{""action"": ""suggest_command"",""value"": ""%{_clusters::%{_i}%::suggest}%""}"

		if {_clusters::%{_i}%::url} is set:
			set {_clickable} to "%{_json}%,""clickEvent"":{""action"": ""open_url"",""value"": ""%{_clusters::%{_i}%::url}%""}"

		if {_clickable} is set:
			set {_json} to "%{_clickable}%}"
			delete {_clickable}

		else:
			set {_json} to "%{_json}%}"

	return "{""text"":"""", ""extra"":[%{_json}%]}"
function jsonProton(to: text, msg: text, color: boolean = true):
	set {_msg} to jsonFormatProton({_msg}, {_color})
	execute console command "/tellraw %{_to}% %{_msg}%"

	if {@debug} is true:
		set {_player} to {_to} parsed as offline player
		if {_player} is online:
			send uncolored {_msg} to {_player}
function jsonBroadcastProton(msg: text, color: boolean = true):
	jsonProton("@a", {_msg}, {_color})
#! json.sk
# I DO NOT OWN json.sk, I DON'T TAKE ANY CREDIT
# json.sk BELONGS TO "RezzedUp"
on load:
	if {proton.maxHealth} is not set:
		set {proton.maxHealth} to 10
command /proton [<text>]:
	description: Shows all commands in Proton
	trigger:
		if arg 1 is not set:
			send "&cUsage: /proton [help]"
		if arg 1 is "help":
			send "&6&m---+---&r &eProton &6&m---+---&r"
			send " &8• &7A List of commands can be found here:"
			send " &f&nhttps://goo.gl/EAFlng"
command /gamemode [<text>] [<text="%player%">]:
	permission: proton.gamemode
	description: Changes gamemode
	permission message: {@em} [proton.gamemode]
	usage: /gamemode [gamemode] (player)
	aliases: /gm
	trigger:
		set {_p} to arg-2 parsed as player
		if {_p} is online:
			if arg 1 is not set:
				send "&cUsage: /gamemode [num] (player)"
			else if arg 1 is "creative" or "c" or "1":
				set {_p}'s gamemode to creative
				send "{@p} Your gamemode has been updated to {@h}Creative{@t}." to {_p}
				if {_p} isn't sender:
					send "{@p} {@h}%{_p}%{@t}'s gamemode was updated to {@h}Creative{@t}." to sender
			else if arg 1 is "survival" or "s" or "0":
				set {_p}'s gamemode to survival
				send "{@p} Your gamemode has been updated to {@h}Survival{@t}." to {_p}
				if {_p} isn't sender:
					send "{@p} {@h}%{_p}%{@t}'s gamemode was updated to {@h}Survival{@t}." to sender
			else if arg 1 is "adventure" or "a" or "2":
				set {_p}'s gamemode to adventure
				send "{@p} Your gamemode has been updated to {@h}Adventure{@t}." to {_p}
				if {_p} isn't sender:
					send "{@p} {@h}%{_p}%{@t}'s gamemode was updated to {@h}Adventure{@t}." to sender
			else if arg 1 is "spectator" or "sp" or "3" or "spec":
				set {_p}'s gamemode to spectator
				send "{@p} Your gamemode has been updated to {@h}Spectator{@t}." to {_p}
				if {_p} isn't sender:
					send "{@p} {@h}%{_p}%{@t}'s gamemode was updated to {@h}Spectator{@t}." to sender
			else:
				send "{@a} Invalid Argument."
				send "&cUsage: /gamemode &m%arg-1%&c (player)"
		else:
			send "{@a} Player is not online."
			send "&cUsage: /gamemode %arg-1% &m%arg-2%"
command /fly [<text="%player%">]:
	permission: proton.fly
	description: Toggles flight
	permission message: {@em} [proton.fly]
	usage: /fly (player)
	trigger:
		set {_p} to arg-1 parsed as player
		if {_p} is online:
			if {proton.fly::%{_p}%} is true:
				delete {proton.fly::%{_p}%}
				set {_p}'s fly mode to false
				send "{@p} Flight mode {@h}disabled{@t}." to {_p}
				if arg 1 isn't sender:
					send "{@p} {@h}%{_p}%{@t}'s flight mode was {@h}disabled{@t}." to sender
			else:
				set {proton.fly::%{_p}%} to true
				set {_p}'s fly mode to true
				send "{@p} Flight mode {@h}enabled{@t}." to {_p}
				if arg 1 isn't sender:
					send "{@p} {@h}%{_p}%{@t}'s flight mode was {@h}enabled{@t}." to sender
		else:
			send "{@a} Player is not online."
			send "&cUsage: /fly &m%arg-1%"
command /tp [<player>] [<player>]:
	permission: proton.tp
	description: Teleports to player
	permission message: {@em} [proton.tp]
	usage: /tp [player] (player)
	trigger:
		if arg 1 is not set:
			send "&cUsage: /tp [player] (player)"
		else if arg 1 is set:
			if arg 2 is not set:
				if {proton.teleporting::%sender%} is true:
					send "{@a} &cPlayer is already being teleported"
					stop
				else:
					set {proton.teleporting::%sender%} to true
					set {proton.lastLoc::%sender%} to sender's location
					teleport sender to arg-1
					send "{@p} Teleported to {@h}%arg-1%{@t}." to sender
					wait 1 second
					delete {proton.teleporting::%sender%}
			else:
				if {proton.teleporting::%arg-1%} is true:
					send "&c&oPlayer is already being teleported"
					stop
				else:
					set {proton.teleporting::%arg-1%} to true
					set {proton.lastLoc::%arg-1%} to arg-1's location
					teleport arg-1 to arg-2
					send "{@p} Teleported {@h}%arg-1%{@t} to {@t}%arg-2%{@t}" to sender
					send "{@p} Teleported to {@h}%arg-2%{@t}." to arg-1
					wait 1 second
					delete {proton.teleporting::%arg-1%}
command /tphere [<player>]:
	permission: proton.tphere
	description: Teleports a player to sender
	permission message: {@em} [proton.tphere]
	usage: /tphere [player]
	aliases: /s
	trigger:
		if arg 1 is not set:
			send "&cUsage: /tphere [player]"
		else:
			make player execute command "/tp %arg 1% %sender%"
command /tpall:
	permission: proton.tpall
	description: Teleports all players to sender
	permission message: {@em}
	usage: /tpall
	trigger:
		set {_loc} to sender's location
		set {_count} to 0
		set {_countTotal} to 0
		set {_total} to number of all players
		loop all players:
			teleport loop-player to sender's location
			add 1 to {_count}
			add 1 to {_countTotal}
			if {_count} = 20:
				set {_count} to 0
				send "{@p} Sent %{_countTotal}% people. Next group in {@h}3s{@t}. &8[&e%{_countTotal}%&7/&e%{_total}%&8]"
				wait 3 seconds
		delete {_loc}
		send "{@p} Teleported all players to your location"
		broadcast "{@p} Teleported to {@h}%sender%{@t}."
command /tpcoords [<integer>] [<integer>] [<integer>]:
	permission: proton.tpcoords
	aliases: /tppos
	permission message: {@em} [proton.tpcoords]
	usage: /tpcoords [x] [y] [z]
	trigger:
		if arg 1 is not set:
			send "&cUsage: /tpcoords [x] [y] [z]"
		else if arg 1 is set:
			if arg 2 is set:
				if arg 3 is set:
					if {proton.teleporting::%arg-1%} is true:
						send "{@a} &cPlayer is already being teleported"
						stop
					else:
						set {_x} to arg-1
						set {_z} to arg-3
						add 0.5 to {_x}
						add 0.5 to {_z}
						set {proton.teleporting::%arg-1%} to true
						set {proton.lastLoc::%sender%} to sender's location
						set {_world} to sender's world
						set {_loc} to location({_x}, arg-2, {_z}, {_world})
						teleport sender to {_loc}
						send "{@p} Teleported to {@h}%{_x}%, %arg-2%, %{_z}%{@t}."
						wait 1 second
						delete {proton.teleporting::%arg-1%}
				else:
					send "{@a} Invalid Argument."
					send "&cUsage: /tpcoords [x] [y] [z]"
			else:
				send "{@a} Invalid Argument."
				send "&cUsage: /tpcoords [x] [y] [z]"
command /sethome:
	permission: proton.sethome
	permission message: {@em} [proton.sethome]
	usage: /sethome
	trigger:
		set {proton.home::%sender's uuid%} to sender's location
		set {_x} to sender's x-coordinate
		set {_y} to sender's y-coordinate
		set {_z} to sender's z-coordinate
		send "{@p} Home set at {@h}%{_x}%, %{_y}%, %{_z}%{@t}."
command /home:
	permission: proton.home
	permission message: {@em} [proton.home]
	usage: /home
	trigger:
		if {proton.home::%sender's uuid%} is set:
			if {proton.teleporting::%sender%} is true:
				send "{@a} &cPlayer is already being teleported"
				stop
			else:
				set {proton.teleporting::%sender%} to true
				set {proton.lastLoc::%sender%} to sender's location
				teleport sender to {proton.home::%sender's uuid%}
				send "{@p} Teleported to your home location."
				wait 1 second
				delete {proton.teleporting::%sender%}
		else:
			send "{@a} &cYou do not have a home set."
			send "&cUsage: /sethome"
command /warp [<text>] [<player>]:
	permission: proton.warp
	permission message: {@em} [proton.warp]
	usage: /warp [warpName] (player)
	trigger:
		if arg 1 is set:
			if arg 2 is set:
				if sender has permission "proton.warp.other":
					if "%{proton.warps::*}%" contains "%arg-1%":
						if sender has permission "proton.warp.%arg-1%":
							set {proton.lastLoc::%player-arg%} to player-arg's location
							teleport player-arg to {proton.warpLoc::%arg-1%}
							send "{@p} Teleported {@h}%player-arg%{@t} to {@h}%arg-1%{@t}." to sender
							send "{@p} Teleported to {@h}%arg-1%{@t}." to player-arg
						else:
							send "{@a} {@em} [proton.warp.%arg-1%]" to sender
					else:
						send "{@a} &cWarp &6%arg-1%&c does not exist" to sender
				else:
					send "{@a} {@em}"
			else:
				if "%{proton.warps::*}%" contains "%arg-1%":
					if sender has permission "proton.warp.%arg-1%":
						set {proton.lastLoc::%player%} to player's location
						teleport player to {proton.warpLoc::%arg-1%}
						send "{@p} Teleported to {@h}%arg-1%{@t}." to player
					else:
						send "{@a} {@em} [proton.warp.%arg-1%]" to player
				else:
					send "{@a} &cWarp &6%arg-1%&c does not exist" to player
		else:
			send "&cUsage: /warp [warpName] (player)"
		stop
command /setwarp [<text>]:
	permission: proton.setwarp
	permission message: {@em} [proton.setwarp]
	usage: /setwarp [warpName]
	aliases: /warpset
	trigger:
		if arg 1 is set:
			if "%arg-1%" contains " " or "," or "." or "::" or ";" or "<" or ">" or "{" or "}" or "(" or ")" or ":" or "-" or "+":
				send "{@a} &cWarps cannot contain special characters. Use &oA-Z&r&c and &o0-9&r&c."
				stop
			else:
				if "%{proton.warps::*}%" contains "%arg-1%":
					if {proton.warpOverwite::%player%} is not set:
						send "{@a} &cWarp &6%arg-1%&c already exists. To overwrite, run the command again."
						set {proton.warpOverwite::%player%} to true
						wait 10 seconds
						delete {proton.warpOverwite::%player%}
					else:
						set {proton.warpLoc::%arg-1%} to player's location
						if "%{proton.warps::*}%" does not contain "%arg-1%":
							add arg-1 to {proton.warps::*}
							send "{@p} Warp {@h}%arg-1%{@t} has been set to your location"
						else:
							send "{@p} Warp {@h}%arg-1%{@t} has been set to your location"
				else:
					set {proton.warpLoc::%arg-1%} to player's location
					if "%{proton.warps::*}%" does not contain "%arg-1%":
						add arg-1 to {proton.warps::*}
						send "{@p} Warp {@h}%arg-1%{@t} has been set to your location"
					else:
						send "{@p} Warp {@h}%arg-1%{@t} has been set to your location"
		else:
			send "&cUsage: /setwarp [warpName]"
		stop
command /delwarp [<text>]:
	permission: proton.delwarp
	permission message: {@em} [proton.delwarp]
	usage: /delwarp [warpName]
	aliases: /warpdel
	trigger:
		if arg 1 is "-c":
			if player has permission "proton.resetWarps":
				clear {proton.warps::*}
				clear {proton.warpLoc::*}
				send "{@p} All warps cleared"
			else:
				send "&cUsage: /delwarp [warpName]"
		else if arg 1 is set:
			if "%{proton.warps::*}%" contains "%arg-1%":
				delete {proton.warpLoc::%arg-1%}
				remove arg-1 from {proton.warps::*}
				send "{@p} Warp {@h}%arg-1%{@t} has been deleted"
			else:
				send "{@a} &cWarp &6%arg-1%&c does not exist."
		else:
			send "&cUsage: /delwarp [warpName]"
command /warps:
	permission: proton.warps
	permission message: {@em} [proton.warps]
	usage: /warps
	aliases: /warplist
	trigger:
		send "{@p} &aAll warps"
		if "%{proton.warps::*}%" = "<none>":
			send "   &7▪ &cNo warps set"
		else:
			send "   &7▪ &f&o%{proton.warps::*}%"
		stop
command /setspawn:
	permission: proton.setspawn
	permission message: {@em} [proton.setspawn]
	usage: /setspawn
	trigger:
		set {proton.spawn} to sender's location
		set {_x} to sender's x-coordinate
		set {_y} to sender's y-coordinate
		set {_z} to sender's z-coordinate
		send "{@p} Spawn location set to {@h}%{_x}%, %{_y}%, %{_z}%{@t}."
command /spawn [<player=%player%>]:
	permission: proton.spawn
	permission message: {@em} [proton.setwarp]
	usage: /spawn (player)
	trigger:
		if {proton.spawn} is set:
			if {proton.teleporting::%arg-1%} is true:
				send "{@a} &c&oPlayer is already being teleported"
				stop
			else:
				set {proton.teleporting::%arg-1%} to true
				set {proton.lastLoc::%arg-1%} to arg-1's location
				teleport arg-1 to {proton.spawn}
				if arg 1 isn't sender:
					send "{@p} Teleported {@h}%arg-1%{@t} to spawn." to sender
				send "{@p} Teleported to spawn." to arg-1
				wait 1 second
				delete {proton.teleporting::%arg-1%}
		else:
			send "{@a} Spawn is not set."
			if sender has permission "proton.setspawn":
				send "&cUsage: /setspawn"
command /effect [<text>] [<text>] [<integer>] [<integer>]:
	permission: proton.effect
	permission message: {@em}
	usage: &c/effect
	description: Apply potion effects to a player
	trigger:
		if arg 1 is not set:
			send "&cUsage: /effect [player] [effect] [time] (tier)"
		if arg 1 is "all" or "*":
			if player has permission "proton.effect.all":
				if arg 2 is set:
					if arg 3 is set:
						if arg 4 is set:
							loop all players:
								apply (arg-2) (arg-4) to loop-player for (arg-3) seconds
							send "{@p} Applied {@h}%arg-2% %arg-3%{@t} to all players for {@h}%arg-4% seconds{@t}."
						else:
							loop all players:
								apply (arg-2) to loop-player for (arg-3) seconds
							send "{@p} Applied {@h}%arg-2%{@t} to all players for {@h}%arg-4% seconds{@t}."
					else:
						send "&cUsage: /effect %arg-1% %arg-2% [time] (tier)"
				else:
					send "&cUsage: /effect %arg-1% [effect] [time] (tier)"
			else:
				send "&cInsufficient permissions."
		else if arg 1 is set:
			if arg 2 is set:
				if arg 3 is set:
					if arg 4 is set:
						apply (arg-2) (arg-4) to (arg-1) for (arg-3) seconds
						send "{@p} Applied {@h}%arg-2% %arg-3%{@t} to &a%arg-1% for {@h}%arg-4% seconds{@t}."

on join:
	delete {proton.visibility::%event-player%}
	delete {proton.fly::%event-player%}
	remove invisibility from the event-player

command /gmc [<player=%player%>]:
	permission: proton.gm
	permission message: {@em} [proton.gm]
	usage: &c/gmc (player)
	description: Changes gamemode to Creative
	trigger:
		if arg-1 is not sender:
			if player has permission "proton.gm.other":
				set player-arg's gamemode to creative
				send "{@p} Your gamemode has been updated to {@h}Creative{@t}." to player-arg
				send "{@p} {@h}%player-arg%{@t}'s gamemode was updated to {@h}Creative{@t}" to sender
			else:
				send "{@a} {@em} [proton.gm.other]"
		else:
			set player-arg's gamemode to creative
			send "{@p} Your gamemode has been updated to {@h}Creative{@t}." to player-arg
command /gms [<player=%player%>]:
	permission: proton.gm
	permission message: {@em} [proton.gm]
	usage: &c/gms (player)
	description: Changes gamemode to Survival
	trigger:
		if arg-1 is not sender:
			if player has permission "proton.gm.other":
				set player-arg's gamemode to survival
				send "{@p} Your gamemode has been updated to {@h}Creative{@t}." to player-arg
				send "{@p} {@h}%player-arg%{@t}'s gamemode was updated to {@h}Creative{@t}" to sender
			else:
				send "{@a} {@em} [proton.gm.other]"
		else:
			set player-arg's gamemode to survival
			send "{@p} Your gamemode has been updated to {@h}Creative{@t}." to player-arg
command /gma [<player=%player%>]:
	permission: proton.gm
	permission message: {@em} [proton.gm]
	usage: &c/gma (player)
	description: Changes gamemode to Adventure
	trigger:
		if arg-1 is not sender:
			if player has permission "proton.gm.other":
				set player-arg's gamemode to adventure
				send "{@p} Your gamemode has been updated to {@h}Creative{@t}." to player-arg
				send "{@p} {@h}%player-arg%{@t}'s gamemode was updated to {@h}Creative{@t}" to sender
			else:
				send "{@a} {@em} [proton.gm.other]"
		else:
			set player-arg's gamemode to adventure
			send "{@p} Your gamemode has been updated to {@h}Creative{@t}." to player-arg
command /gmsp [<player=%player%>]:
	permission: proton.gm
	permission message: {@em} [proton.gm]
	usage: &c/gmsp (player)
	description: Changes gamemode to Spectator
	trigger:
		if arg-1 is not sender:
			if player has permission "proton.gm.other":
				set player-arg's gamemode to spectator
				send "{@p} Your gamemode has been updated to {@h}Creative{@t}." to player-arg
				send "{@p} {@h}%player-arg%{@t}'s gamemode was updated to {@h}Creative{@t}" to sender
			else:
				send "{@a} {@em} [proton.gm.other]"
		else:
			set player-arg's gamemode to spectator
			send "{@p} Your gamemode has been updated to {@h}Creative{@t}." to player-arg
on join:
	set join message to "{@joinMessage}"
on quit:
	set leave message to "{@quitMessage}"
command /top:
	permission: proton.top
	permission message: {@em} [proton.top]
	usage: &c/top
	description: Teleports you up to the highest point above you
	trigger:
		set {_loc} to location of block at player
		set y-coordinate of {_loc} to 256
		set {_n} to 0
		loop 255 times:
			set {_n} to {_n}+1
			block {_n} below block at {_loc} is not air
			set {_n} to {_n}-1
			teleport player to block {_n} below block at {_loc}
			send "{@p} Teleported to top."
			stop
command /speed [<number>] [<player=%player%>]:
	permission: proton.speed
	permission message: {@em} [proton.speed]
	usage: &c/speed [0-10] (player)
	description: Changes walk/flight speed
	trigger:
		if arg 1 isn't set:
			send "&cUsage: /speed [0-10] (player)"
		else:
			if arg 1 is between 1 and 10:
				set {_speed} to arg-1 / 10
				if player-arg is flying:
					if player-arg isn't sender:
						send "{@p} {@h}%player-arg%'s{@t} flight speed was set to {@h}%arg-1%{@t}."
					send "{@p} Your flight speed was set to {@h}%arg-1%{@t}." to player-arg
					set the player-arg's fly speed to {_speed}
				else:
					send "{@p} {@h}%player-arg%'s{@t} walk speed was set to {@h}%arg-1%{@t}."
					send "{@p} Your walk speed was set to {@h}%arg-1%{@t}." to player-arg
					set the player-arg's walk speed to {_speed}
			else if arg 1 is greater than 10:
				send "{@a} &cToo large of a number."
				send "&cUsage: /speed [0-10] (player)"
			else:
				if player-arg is flying:
					if player-arg isn't sender:
						send "{@p} {@h}%player-arg%'s{@t} flight speed was {@h}reset{@t}."
					send "{@p} Your flight speed was {@h}reset{@t}." to player-arg
					reset the player-arg's fly speed
				else:
					if player-arg isn't sender:
						send "{@p} {@h}%player-arg%'s{@t} flight speed was {@h}reset{@t}."
					send "{@p} Your walk speed was {@h}reset{@t}." to player-arg
					reset the player-arg's walk speed
command /blacklist [<text>] [<offline player>]:
	permission: proton.blacklist
	permission message: {@em} [proton.blacklist]
	usage: &c/blacklist [add|remove|list|reset] (player)
	description: Blacklists people to the server
	trigger:
		if arg 1 is "add" or "+":
			if arg 2 is set:
				send "{@p} {@h}%offline player-arg%{@t} has been added to the &8blacklist{@t}."
				add "%offline player-arg%" to {proton.blacklist::*}
			else:
				send "{@a} &cSpecify a player"
				send "&cUsage: /blacklist %arg-1% (player)"
		else if arg 1 is "remove" or "delete" or "-":
			if arg 2 is set:
				if "%{proton.blacklist::*}%" contains "%offline player-arg%":
					send "{@p} {@h}%offline player-arg%{@t} has been removed from the &8blacklist{@t}."
					remove "%offline player-arg%" from {proton.blacklist::*}
				else:
					send "{@a} &cThat player is not on the blacklist"
					send "&cUsage: /blacklist %arg-1% &m%arg-2%"
			else:
				send "{@a} &cSpecify a player"
				send "&cUsage: /blacklist %arg-1% (player)"
		else if arg 1 is "list":
			send "{@p} &8Blacklist&7:"
			loop {proton.blacklist::*}:
				send "  &7- &a%loop-value%"
			stop
		else if arg 1 is "reset":
			if sender has permission "proton.blacklist.reset":
				delete {proton.blacklist::*}
				send "{@p} &8Blacklist{@t} cleared."
			else:
				send "{@a} {@em} [proton.blacklist.reset]"
		else if arg 1 is "on":
			set {proton.blacklist} to true
			send "{@p} Blacklist enabled."
		else if arg 1 is "off":
			set {proton.blacklist} to false
			send "{@p} Blacklist disabled."
		else:
			send "&cUsage: /blacklist [add|remove|list|reset] (player)"
		stop
on connect:
	if {proton.whitelist} is true:
		if "%{proton.whitelist::*}%" doesn't contain "%event-player%":
			kick event-player due to "&7You are not &fWhitelisted &7on this server."
			stop
		else if "%{proton.blacklist::*}%" contains "%event-player%":
			if {proton.blacklist} is true:
				kick event-player due to "&7You are &8Blacklisted&7 on this server."
				stop
	else if {proton.blacklist} is true:
		if "%{proton.blacklist::*}%" contains "%event-player%":
			kick event-player due to "&7You are &8Blacklisted&7 on this server."
			stop
command /whitelist [<text>] [<offline player>]:
	permission: proton.whitelist
	permission message: {@em} [proton.whitelist]
	usage: &c/whitelist [add|remove|list|reset] (player)
	description: Whitelists people to the server
	trigger:
		if arg 1 is "add" or "+":
			if arg 2 is set:
				send "{@p} {@h}%offline player-arg%{@t} has been added to the &7Whitelist{@t}."
				add "%offline player-arg%" to {proton.whitelist::*}
			else:
				send "{@a} &cSpecify a player"
				send "&cUsage: /whitelist %arg-1% (player)"
		else if arg 1 is "remove" or "delete" or "-":
			if arg 2 is set:
				if "%{proton.whitelist::*}%" contains "%offline player-arg%":
					send "{@p} {@h}%offline player-arg%{@t} has been removed from the &7Whitelist{@t}."
					remove "%offline player-arg%" from {proton.whitelist::*}
				else:
					send "{@a} &cThat player is not on the whitelist"
					send "&cUsage: /whitelist %arg-1% &m%arg-2%"
			else:
				send "{@a} &cSpecify a player"
				send "&cUsage: /whitelist %arg-1% (player)"
		else if arg 1 is "list":
			send "{@p} &7Whitelist&7:"
			loop {proton.whitelist::*}:
				send "  &7- &a%loop-value%"
			stop
		else if arg 1 is "reset":
			if sender has permission "proton.whitelist.reset":
				delete {proton.whitelist::*}
				send "{@p} &7Whitelist{@t} cleared."
			else:
				send "{@a} {@em} [proton.whitelist.reset]"
		else if arg 1 is "on":
			set {proton.whitelist} to true
			send "{@p} Whitelist enabled."
		else if arg 1 is "off":
			set {proton.whitelist} to false
			send "{@p} Whitelist disabled."
		else:
			send "&cUsage: /whitelist [add|remove|list|reset] (player)"
		stop
command /time [<text>]:
	permission: proton.time
	permission message: {@em} [proton.time]
	usage: &c/time [set] [day|night|noon|midnight|...]
	description: Sets the time of day
	trigger:
		if arg 1 is "day":
			set time to 9:00am
			send "{@p} Time set to {@h}Day{@t}, or &a9:00am{@t}."
		else if arg 1 is "noon":
			set time to 12:00pm
			send "{@p} Time set to {@h}Noon{@t}, or &a12:00pm{@t}."
		else if arg 1 is "night":
			set time to 9:00pm
			send "{@p} Time set to {@h}Night{@t}, or &a9:00pm{@t}."
		else if arg 1 is "midnight":
			set time to 12:00am
			send "{@p} Time set to {@h}Midnight{@t}, or &a12:00am{@t}."
		else if arg 1 is "dawn":
			set time to 6:00am
			send "{@p} Time set to {@h}Dawn{@t}, or &a6:00am{@t}."
		else if arg 1 is "dusk":
			set time to 7:00pm
			send "{@p} Time set to {@h}Dusk{@t}, or &a7:00am{@t}."
		else:
			send "{@p} Time: %time in world of sender%"
command /day:
	permission: proton.time
	permission message: {@em} [proton.time]
	description: Sets the time of day
	trigger:
		player command "/time day"
command /night:
	permission: proton.time
	permission message: {@em} [proton.time]
	description: Sets the time of day
	trigger:
		player command "/time night"
command /weather [<text>]:
	permission: proton.weather
	permission message: {@em} [proton.weather]
	usage: &c/weather [sun|rain|thunder]
	description: Sets the worlds weather
	trigger:
		if arg 1 is "sun":
			set weather to clear
			send "{@p} Weather set to {@h}Sun{@t}."
		else if arg 1 is "rain":
			set weather to rain
			send "{@p} Weather set to {@h}Rain{@t}."
		else if arg 1 is "thunder":
			set weather to thunder
			send "{@p} Weather set to {@h}Thunder{@t}."
		else:
			send "&cUsage: /weather [sun|rain|thunder]"
on weather change:
	if {proton.permWeather} is true:
		cancel event
command /sun:
	permission: proton.weather
	permission message: {@em} [proton.weather]
	description: Sets the worlds weather
	trigger:
		player command "/weather sun"
command /rain:
	permission: proton.weather
	permission message: {@em} [proton.weather]
	description: Sets the worlds weather
	trigger:
		player command "/weather rain"
command /thunder:
	permission: proton.weather
	permission message: {@em} [proton.weather]
	description: Sets the worlds weather
	trigger:
		player command "/weather thunder"
command /head [<text="%player%">]:
	permission: proton.head
	permission message: {@em} [proton.head]
	usage: &c/head [player]
	description: Gives a player head
	aliases: /skull, /playerhead
	trigger:
		set {_head} to arg-1 parsed as offline player
		give {_head}'s skull named "&aPlayer Head" with lore "&7Skull Owner: &f%arg-1%" to player
		send "{@p} Given {@h}%arg-1%{@t}'s Head."
command /clear [<player=%player%>]:
	permission: proton.clear
	permission message: {@em} [proton.clear]
	usage: &c/clear [player]
	description: Clears inventory
	aliases: /ci, /clearinventory
	trigger:
		if arg 1 isn't sender:
			if sender has permission "proton.clear.other":
				send "{@p} Cleared {@h}%player-arg%'s{@t} inventory{@t}."
			else:
				send "{@a} {@em} [proton.clear.other]"
		clear player-arg's inventory
		send "{@p} Your inventory has been cleared{@t}." to player-arg
command /heal [<player=%player%>]:
	permission: proton.heal
	permission message: {@em} [proton.heal]
	usage: &c/clear [player]
	description: Heals to full health
	trigger:
		if sender isn't arg 1:
			if sender doesn't have permission "proton.heal.other":
				send "{@a} {@em} [proton.heal.other]"
			else:
				send "{@p} Healed {@h}%player-arg%{@t}."
		heal player-arg
		send "{@p} You have been healed." to player-arg
on command "/heal *":
	cancel event
	if player has permission "proton.heal.all":
		loop all players:
			heal loop-player
		send "{@p} Healed all players"
	else:
		send "{@a} {@em} [proton.heal.all]"
on command "/feed *":
	cancel event
	if player has permission "proton.feed.all":
		loop all players:
			set the loop-player's food level to 20
			apply saturation 2 to loop-player for 10 seconds
		send "{@p} Nourished all players"
	else:
		send "{@a} {@em} [proton.feed.all]"
command /feed [<player=%player%>]:
	permission: proton.feed
	permission message: {@em} [proton.feed]
	usage: &c/feed [player]
	description: Feeds to full hunger
	trigger:
		if sender isn't arg 1:
			if sender doesn't have permission "proton.feed.other":
				send "{@a} {@em} [proton.feed.other]"
			else:
				send "{@p} Nourished {@h}%player-arg%{@t}."
		set the player-arg's food level to 20
		apply saturation 2 to player-arg for 10 seconds
		send "{@p} You have been nourished." to player-arg
command /maxhealth [<integer>]:
	permission: proton.maxhealth
	permission message: {@em} [proton.maxhealth]
	usage: &c/maxhealth [number]
	description: Sets maximum health, goes by hearts.
	trigger:
		if arg 1 is not set:
			send "&cUsage: /maxhealth [1-100|0=reset]"
		else if arg 1 is less than or equal to 0:
			set {proton.maxHealth} to 10
			loop all players:
				set max health of loop-player to {proton.maxHealth}
			send "{@p} Maximum health has been set to &a%{proton.maxHealth}% Hearts{@t}."
		else if arg 1 is greater than 100:
			send "{@a} Too high of a number!"
			send "&cUsage: /maxhealth [1-100|0=reset]"
		else:
			set {proton.maxHealth} to arg-1
			loop all players:
				set max health of loop-player to {proton.maxHealth}
			send "{@p} Maximum health has been set to &a%{proton.maxHealth}% Hearts{@t}."
on join:
	if {proton.maxHealth} is set:
		set event-player's max health to {proton.maxHealth}
command /rename [<text>]:
	permission: proton.rename
	permission message: {@em} [proton.rename]
	usage: &c/rename [name]
	description: Renames held item
	trigger:
		if arg 1 is set:
			if player's tool is nothing:
				send "&cYou can't rename nothing!"
			else:
				set player's held item's name to "%colored arg-1%"
				send "{@p} Renamed &n%player's held item%&r to {@h}%colored arg-1%{@t}."
		else:
			send "&cUsage: /rename [name]"
on sign change:
	if player has permission "proton.coloredsign":
		if line 1 is set:
			set line 1 to "%colored line 1%"
		if line 2 is set:
			set line 2 to "%colored line 2%"
		if line 3 is set:
			set line 3 to "%colored line 3%"
		if line 4 is set:
			set line 4 to "%colored line 4%"
	else:
		if line 1 is set:
			set line 1 to "%uncolored line 1%"
		if line 2 is set:
			set line 2 to "%uncolored line 2%"
		if line 3 is set:
			set line 3 to "%uncolored line 3%"
		if line 4 is set:
			set line 4 to "%uncolored line 4%"
		send "{@a} {@em} [proton.coloredsign]"
command /back:
	permission: proton.back
	permission message: {@em} [proton.back]
	usage: &c/back
	description: Teleports to last location
	trigger:
		if {proton.lastLoc::%sender%} is set:
			set {_lastLoc} to sender's location
			teleport sender to {proton.lastLoc::%sender%}
			set {proton.lastLoc::%sender%} to {_lastLoc}
			send "{@p} Teleported to previous location."
		else:
			send "{@a} &cYou have no previous location!"
command /killall [<text>] [<text="-a">]:
	permission: proton.killall
	permission message: {@em} [proton.killall]
	usage: &c/killall [...]
	description: Kills specified or all entities
	trigger:
		if arg 1 = "animals" or "passive":
			set {proton.entityDrops::%sender's world%} to false
			kill all pigs in sender's world
			kill all cows in sender's world
			kill all bats in sender's world
			kill all chickens in sender's world
			kill all sheeps in sender's world
			kill all squids in sender's world
			kill all villagers in sender's world
			kill all wolves in sender's world
			kill all ocelots in sender's world
			kill all rabbits in sender's world
			kill all horses in sender's world
			kill all iron golems in sender's world
			kill all snow golems in sender's world
			if arg 2 is not "-s":
				send "{@p} Killed all {@h}Animals{@t}."
			delete {proton.entityDrops::%sender's world%}
		else if arg 1 = "monsters" or "hostiles":
			set {proton.entityDrops::%sender's world%} to false
			kill all zombies in sender's world
			kill all skeletons in sender's world
			kill all slimes in sender's world
			kill all blazes in sender's world
			kill all guardians in sender's world
			kill all spiders in sender's world
			kill all endermen in sender's world
			kill all creepers in sender's world
			kill all ghasts in sender's world
			kill all silverfishes in sender's world
			kill all witches in sender's world
			kill all enderdragons in sender's world
			kill all withers in sender's world
			if arg 2 is not "-s":
				send "{@p} Killed all {@h}Monsters{@t}."
			delete {proton.entityDrops::%sender's world%}
		else if arg 1 = "all" or "*":
			player command "/killall animals -s"
			player command "/killall monsters -s"
			send "{@p} Killed all entities."
on item spawn:
	if {proton.entityDrops::%entity's world%} is false:
		cancel event
command /message [<player>] [<text>]:
	permission: proton.message
	permission message: {@em} [proton.message]
	description: Sends a private message to a player
	aliases: /msg, /whisper, /w
	trigger:
		if arg 1 is set:
			if arg 2 is set:
				if player-arg is online:
					set {proton.msgReply::%player-arg%} to sender
					send "&8[&6You &7» &6%player-arg%&8] &f&o%arg-2%" to sender
					send "&8[&6%sender% &7» &6You&8] &f&o%arg-2%" to player-arg
				else:
					send "{@a} &c%player-arg% is not online"
			else:
				send "&cUsage: /message %arg-1% [message]"
		else:
			send "&cUsage: /message [player] [message]"
command /reply [<text>]:
	permission: proton.message.reply
	permission message: {@em} [proton.message.reply]
	description: Replies to last messanger
	aliases: /r
	trigger:
		if {proton.msgReply::%sender%} is set:
			if arg 1 is set:
				player command "/message %{proton.msgReply::%sender%}% %arg-1%"
			else:
				send "&cUsage: /reply [message]"
		else:
			send "{@a} &cYou have no-one to reply to. :("
#command /xp [<text>] [<integer>] [<player>]:
#	permission: proton.xp
#	permission message: {@em}
#	description: Manages experience
#	aliases: /experience, /exp
#	trigger:
#		if arg 1 is "level" or "l":
#			if arg 2 is set:
#				if arg 3 is set:
#					set {_a1} to argument 2 * 2
#					set {_a2} to argument 2 - {_a1}
#					reduce the player-arg's level by {_a2}
#					if arg-2 is less than 0:
#						send "{@p} Removed &a%arg-2% EXP Levels{@t} from {@h}%player-arg%{@t}."
#					else:
#						send "{@p} Gave &a%arg-2% EXP Levels{@t} from {@h}%player-arg%{@t}."
#				else:
#					set {_a1} to argument 2 * 2
#					set {_a2} to argument 2 - {_a1}
#					reduce the sender's level by {_a2}
#					if arg-2 is less than 0:
#						send "{@p} Removed &a%arg-2% EXP Levels{@t}."
#					else:
#						send "{@p} Gave &a%arg-2% EXP Levels{@t}."
#			else if arg 2 is not set:
#				send "&cUsage: /xp [give|set|remove] [amount] (player)"
#		else if arg 1 is "point" or "p":
#			if arg 2 is set:
#				if arg 3 is set:
#					give arg-2 xp to the player-arg
#					if arg-2 is less than 0:
#						send "{@p} Removed &a%arg-2% EXP Levels{@t} from {@h}%player-arg%{@t}."
#					else:
#						send "{@p} Gave &a%arg-2% EXP Levels{@t} from {@h}%player-arg%{@t}."
#				else:
#					give arg-2 xp to the player-arg
#					if arg-2 is less than 0:
#						send "{@p} Removed &a%{_a}% EXP Levels{@t}."
#					else:
#						send "{@p} Gave &a%arg-2% EXP Levels{@t}."
#			else if arg 2 is not set:
#				send "&cUsage: /xp [give|set|remove] [amount] (player)"
#
command /give [<player>] [<text>] [<integer=1>]:
	permission: proton.give
	permission message: {@em} [proton.give]
	aliases: /giveitem, /g
	usage: /give [player] [item] (amount)
	description: Give a player an item
	trigger:
		if arg 1 is set:
			if arg 2 is set:
				set {_item} to "%arg-2%"
				replace all "_" with " " in {_item}
				set {_item} to "%{_item}%" parsed as item
				if {_item} is an item:
					set {_amount} to arg-3
					loop {_amount} times:
						give {_item} to player-arg
					if sender is player-arg:
						send "{@p} Recieved &a%{_amount}%x %{_item}%{@t}." to player-arg
					else:
						send "{@p} Given &a%{_amount}%x %{_item}%{@t} to {@h}%player-arg%{@t}."
				else:
					send "{@a} &6%{_item}% &cis not an item"
					if arg 3 > 1:
						send "&cUsage: /give %arg-1% &m%arg-2%&c&r %arg-3%"
					else:
						send "&cUsage: /give %arg-1% &m%arg-2%&c&r (amount)"
			else:
				send "&cUsage: /give %arg-1% [item] (amount)"
		else:
			send "&cUsage: /give [player] [item] (amount)"
command /item [<text>]:
	permission: proton.item
	permission message: {@em} [proton.item]
	usage: /item [item] (amount)
	aliases: /i
	description: Gives an item to sender
	trigger:
		if arg 1 is set:
			player command "/give %sender% %arg 1%"
		else:
			send "&cUsage: /item [item] (amount)"
command /iteminfo [<item=%tool of player%>]:
	permission: proton.iteminfo
	permission message: {@em} [proton.itemInfo]
	usage: /iteminfo (item)
	aliases: /itemdb
	description: Displays information of player's held item or specified item
	trigger:
		set {_lore} to lore of arg 1
		replace all "||" in {_lore} with "%nl%"
		replace all "<none>" in {_lore} with ""
		set {_name} to name of arg-1
		if "%{_name}%" is "<none>":
			set {_name} to "%type of arg 1%"
		jsonProton("%player%", "{@p} Item Information: ||&a%type of arg-1%||ttp:%{_name}%%nl%%{_lore}%|| &a(ID: %id of arg-1%:%data value of arg-1%)")
command /lore [<integer>] [<text>]:
	permission: proton.lore
	permission message: {@em} [proton.lore]
	usage: /lore [lineNumber] [...]
	aliases: /setlore
	description: Sets a line of player's held item's lore to a text
	trigger:
		if player's tool is nothing:
			send "{@a} You must be holding an item."
		else:
			if arg 1 is set:
				if arg 2 is set:
					set line (arg-1) of lore of player's held item to "%colored arg-2%"
					send "{@p} Set {@h}Lore Line %arg-1%{@t} to &r%colored arg-2%&r{@t}."
				else:
					clear line (arg-1) of lore of player's held item
					send "{@p} Removed {@h}Lore Line %arg-1%{@t}."
			else:
				send "&cUsage: /setlore [lineNumber] [...]"
command /broadcast [<text>]:
	permission: proton.lore
	permission message: {@em} [proton.broadcast]
	usage: /broadcast [text]
	aliases: /alert
	description: Sends a message to the whole Server
	trigger:
		if arg 1 is set:
			broadcast "{@alert} %colored arg 1%"
		else:
			send "&cUsage: /broadcast [text]"
command /list:
	permission: proton.list
	permission message: {@em} [proton.list]
	usage: /list
	aliases: /staff
	description: Displays a list of the online players
	trigger:
		loop all players:
			if loop-player has permission "proton.staff":
				add "%loop-player%" to {_staff::*}
			else:
				add "%loop-player%" to {_players::*}
		set {_staff} to "%{_staff::*}%"
		replace all " and " in {_staff} with ", "
		if {_staff} isn't "<none>":
			send "{@p} Online Staff: &a%{_staff}%"
		set {_players} to "%{_players::*}%"
		replace all " and " in {_players} with ", "
		if {_players} isn't "<none>":
			send "{@p} Online Players: &a%{_players}%"
command /giveall [<text>] [<integer=1>]:
	permission: proton.give.all
	permission message: {@em} [proton.give.all]
	usage: /giveall [item] (amount)
	description: Give all players an item
	trigger:
		if arg 1 is set:
			set {_item} to "%arg-1%"
			replace all "_" with " " in {_item}
			set {_item} to "%{_item}%" parsed as item
			if {_item} is an item:
				if arg 2 is set:
					set {_amount} to arg-2
					loop all players:
						loop {_amount} times:
							give {_item} to loop-player
						if sender is not loop-player:
							send "{@p} Recieved &a%{_amount}%x %{_item}%{@t}." to loop-player
					send "{@p} Given &a%{_amount}%x %{_item}%{@t} to {@h}all players{@t}." to sender
			else:
				send "{@a} &6%{_item}% &cis not an item"
				send "&cUsage: /giveall &m%arg-1%&c&r %arg-2%"
		else:
			send "&cUsage: /giveall [item] (amount)"
command /powertool [<text>] [<text="clear">]:
	permission: proton.powertool
	permission message: {@em} [proton.powertool]
	usage: /powertool [left|right(click)] [command|clear]
	description: Bind a command to your tool
	aliases: /pt
	trigger:
		if player's tool is nothing:
			send "{@a} &cYou can't rename nothing!"
		else:
			if arg 1 is "left" or "leftclick":
				if arg 2 is "clear":
					delete {proton.powerTool-left::%sender's tool%::%sender%}
					send "{@p} Unbound Powertool command from {@h}Left-Click{@t} action."
				else:
					set {proton.powerTool-left::%sender's tool%::%sender%} to "%arg-2%"
					send "{@p} Bound &a`%arg-2%`{@t} to {@h}Left-Click{@t} action."
			else if arg 1 is "right" or "rightclick":
				if arg 2 is "clear":
					delete {proton.powerTool-right::%sender's tool%::%sender%}
					send "{@p} Unbound Powertool command from {@h}Right-Click{@t} action."
				else:
					set {proton.powerTool-right::%sender's tool%::%sender%} to "%arg-2%"
					send "{@p} Bound &a`%arg-2%`{@t} to {@h}Right-Click{@t} action."
			else if arg 1 is "clear":
				delete {proton.powerTool-right::%sender's tool%::%sender%}
				delete {proton.powerTool-left::%sender's tool%::%sender%}
				send "{@p} Unbound Powertool commands from {@h}Left-Click{@t} and {@h}Right-Click{@t} action."
			else:
				send "&cUsage: /powertool [left|right(click)|clear] [command|clear]"
on left click:
	player has permission "proton.powertool":
		if {proton.powerTool-left::%sender's tool%::%sender%} is set:
			make player execute command "%{proton.powerTool-left::%sender's tool%::%sender%}%"
on right click:
	player has permission "proton.powertool":
		if {proton.powerTool-right::%sender's tool%::%sender%} is set:
			make player execute command "%{proton.powerTool-right::%sender's tool%::%sender%}%"
